{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "API for working with the database for the Tasteorama website.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This API was created by a student team to work with a NoSQL MongoDB database."
  },
  "servers": [
    {
      "url": "https://recepy-api.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Categories",
      "description": "Categories operations."
    },
    {
      "name": "Users",
      "description": "Users operations."
    },
    {
      "name": "Recipes",
      "description": "Recipes operations."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registration user",
        "operationId": "registerUser",
        "description": "Registration new user in App",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/register-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create a new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered and logged a user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/register-pesponse"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "user`s email",
                    "example": "stepan@ukr.da"
                  },
                  "password": {
                    "type": "string",
                    "description": "User`s password",
                    "example": 12345678
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken",
                        "name"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Token for access",
                          "example": "5H4mA9kN4mMs5teK8gobAU4qblreV+DjjQby3kxz"
                        },
                        "name": {
                          "type": "string",
                          "description": "Current user name",
                          "example": "Stepan Bandera"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Email or passwort is incorrect"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logout user",
        "security": [],
        "responses": {
          "204": {
            "description": "Successfully logout"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh token user",
        "operationId": "refreshUser",
        "description": "Refresh token user",
        "security": [],
        "responses": {
          "200": {
            "description": "Refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Refresh Token for access",
                          "example": "5H4mA9kN4mMs5teK8gobAU4qblreV+DjjQby3kxz"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Session not found/Refreschtoken is invalid/Session token expired"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get all ingredients",
        "operationId": "getIngredients",
        "description": "Returns a list of all ingredients",
        "security": [],
        "responses": {
          "200": {
            "description": "List of ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ingredients"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories/all": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "operationId": "getCategories",
        "description": "Returns the list of recipe categories",
        "security": [],
        "responses": {
          "200": {
            "description": "Category list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successful request for all categories"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/getAllCategories"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get users info",
        "operationId": "getUserInfo",
        "description": "Get info about current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get info about current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found info about current user"
                    },
                    "data": {
                      "$ref": "#/components/schemas/usersWithRecipes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Ipdate users info",
        "operationId": "updateUserInfo",
        "description": "Update info about current user, name or email",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "user`s email",
                    "example": "steve@main.kraft"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 16,
                    "description": "User`s name",
                    "example": "Steve"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update info about current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully update contact info current user"
                    },
                    "data": {
                      "$ref": "#/components/schemas/users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Отримати всі рецепти",
        "operationId": "getAllRecipes",
        "description": "Повертає список рецептів з підтримкою пагінації та фільтрації.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Номер сторінки (за замовчуванням 1)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Кількість рецептів на сторінку (за замовчуванням 12)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Категорія рецепту",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ingredient",
            "in": "query",
            "description": "ID інгредієнта",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Частковий пошук за назвою",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "Успішне отримання списку",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found all recipes!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Створити новий рецепт (приватний)",
        "operationId": "createRecipe",
        "description": "Дозволяє створити рецепт із фото, описом, інгредієнтами та категорією. Необхідна авторизація.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Grilled Chicken with Lemon"
                  },
                  "category": {
                    "type": "string",
                    "example": "Chicken"
                  },
                  "area": {
                    "type": "string",
                    "example": "American"
                  },
                  "instructions": {
                    "type": "string",
                    "example": "Season chicken, grill for 10 minutes per side."
                  },
                  "description": {
                    "type": "string",
                    "example": "A delicious grilled chicken dish with lemon and herbs."
                  },
                  "time": {
                    "type": "integer",
                    "example": 45
                  },
                  "cals": {
                    "type": "integer",
                    "example": 500
                  },
                  "ingredients": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "640c2dd963a319ea671e37aa"
                        },
                        "measure": {
                          "type": "string",
                          "example": "150g"
                        }
                      }
                    },
                    "example": [
                      {
                        "id": "640c2dd963a319ea671e37aa",
                        "measure": "150g"
                      },
                      {
                        "id": "640c2dd963a319ea671e367e",
                        "measure": "2 tbsp"
                      }
                    ]
                  },
                  "ingredientAmount": {
                    "type": "integer",
                    "example": 2
                  },
                  "thumb": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Рецепт успішно створено",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a recipe!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipes"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/own": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Отримати власні рецепти (приватний)",
        "operationId": "getOwn",
        "description": "Повертає список рецептів, створених авторизованим користувачем.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Успішне отримання власних рецептів",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found your recipes!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/recipes"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/favorites/{recipeId}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Видалити рецепт зі списку улюблених (приватний)",
        "operationId": "deleteFavoriteRecipe",
        "description": "Видаляє вказаний рецепт із списку улюблених користувача.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "description": "ID рецепту, який потрібно видалити з улюблених",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Рецепт успішно видалено з улюблених",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe removed from favorites"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "recipeId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Додати рецепт до списку улюблених (приватний)",
        "operationId": "postFavoriteId",
        "description": "Додає вказаний рецепт до списку улюблених авторизованого користувача.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "description": "ID рецепту, який додається до улюблених",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Рецепт успішно додано до улюблених",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe added to favorites"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Видалити рецепт зі списку улюблених (приватний)",
        "operationId": "removeFavoriteRecipe",
        "description": "Видаляє вказаний рецепт із списку улюблених користувача.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "description": "ID рецепту, який потрібно видалити з улюблених",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Рецепт успішно видалено з улюблених",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe removed from favorites"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "recipeId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/{contactId}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Отримати рецепт за ID (приватний)",
        "operationId": "getId",
        "description": "Повертає один рецепт, створений користувачем, за його унікальним ідентифікатором.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "description": "Унікальний ідентифікатор рецепта",
            "schema": {
              "type": "string",
              "example": "665123abc321cc0011aa23ef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успішне отримання рецепта",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found your recipe with 665123abc321cc0011aa23ef!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "register-request": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Stepan Bandera"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "stepan@ukr.da"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "step123an"
          }
        }
      },
      "register-pesponse": {
        "type": "object",
        "required": [
          "name",
          "email",
          "accessToken"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 16,
            "description": "User`s name",
            "example": "Stepan Bandera"
          },
          "email": {
            "type": "string",
            "maxLength": 128,
            "description": "user`s email",
            "example": "stepan@ukr.da"
          },
          "accessToken": {
            "type": "string",
            "description": "Token for access",
            "example": "5H4mA9kN4mMs5teK8gobAU4qblreV+DjjQby3kxz"
          }
        }
      },
      "ingredients": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640c2dd963a319ea671e37aa"
          },
          "name": {
            "type": "string",
            "example": "Squid"
          },
          "desc": {
            "type": "string",
            "example": "A type of cephalopod with a soft, cylindrical body and long tentacles."
          },
          "img": {
            "type": "string",
            "example": "https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e37aa.jpg"
          }
        }
      },
      "getAllCategories": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Mongo ObjectId",
            "example": "6462a9cd4c3d0qqq28391f8a"
          },
          "name": {
            "type": "string",
            "description": "Name categories",
            "example": "Lamb"
          }
        }
      },
      "recipes": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "category",
          "owner",
          "area",
          "instructions",
          "description",
          "thumb",
          "time",
          "ingredients",
          "timestamps"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Recept id",
            "example": "6841738d9abba11274e4c270"
          },
          "name": {
            "type": "string",
            "description": "Recept title",
            "example": "Battenberg Cake"
          },
          "category": {
            "type": "string",
            "description": "Type Recept",
            "enum": [
              "Dessert",
              "Beef",
              "Lamb",
              "Chicken",
              "Seafood",
              "Miscellaneous",
              "Breakfast",
              "Pork"
            ],
            "example": "Pork"
          },
          "owner": {
            "type": "string",
            "description": "Recept userId",
            "example": "684173599abba11274e4c268"
          },
          "area": {
            "type": "string",
            "description": "Place of origin",
            "example": "British"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions recept",
            "example": "Heat oven to 180C/160C fan/gas 4 and line the base and sides of a 20cm square tin with baking parchment (the easiest...."
          },
          "description": {
            "type": "string",
            "description": "Rescription recept",
            "example": "A classic British cake made with almond sponge cake and covered with marzipan. It is traditionally pink and yellow checkered in appearance."
          },
          "thumb": {
            "type": "string",
            "description": "foto recept",
            "example": "https://ftp.goit.study/img/so-yummy/preview/Battenberg%20Cake.jpg"
          },
          "time": {
            "type": "string",
            "description": "Recipe preparation time",
            "example": 60
          },
          "ingredients": {
            "$ref": "#/components/schemas/ingredients"
          },
          "timestamps": {
            "type": "object",
            "format": "date-time",
            "description": "User created",
            "example": "2025-06-06T17:54:59.164+00:00 2025-06-06T17:54:59.164+00:00"
          }
        }
      },
      "usersWithRecipes": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Users id",
            "example": "685e5951b883f8c0dbc569a0"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 16,
            "description": "Users name",
            "example": "Steve"
          },
          "email": {
            "type": "string",
            "maxLength": 128,
            "pattern": "/.+@.+\\..+/",
            "description": "Users email",
            "example": "steve@main.kraft"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Contact created at",
            "example": "2025-06-27T08:41:53.166Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Contact updated at",
            "example": "2025-06-27T08:41:53.166Z"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/recipes"
            }
          },
          "ownRecipes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/recipes"
            }
          }
        }
      },
      "users": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Users id",
            "example": "685e5951b883f8c0dbc569a0"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 16,
            "description": "Users name",
            "example": "Steve"
          },
          "email": {
            "type": "string",
            "maxLength": 128,
            "pattern": "/.+@.+\\..+/",
            "description": "Users email",
            "example": "steve@main.kraft"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Contact created at",
            "example": "2025-06-27T08:41:53.166Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Contact updated at",
            "example": "2025-06-27T08:41:53.166Z"
          },
          "favorites": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "Mongo ObjectId",
              "example": [
                "6863cf88446815dd33f830c2",
                "6863cf88446815dd33f830c3"
              ]
            }
          },
          "ownRecipes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "Mongo ObjectId",
              "example": [
                "6863cf88446815dd33f830a1"
              ]
            }
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized Error"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Email in use"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}